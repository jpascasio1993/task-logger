allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

rootProject.buildDir = "../build"
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            def javaVersion = JavaVersion.VERSION_17

            project.android {
                if (namespace == null) {
                    namespace = project.group.toString()  // Set namespace as fallback
                }

                compileSdk = flutter.compileSdkVersion
                ndkVersion = flutter.ndkVersion

                println "package :${project.group.toString()}"
                println "targetSDk :${flutter.targetSdkVersion}"
                println "compileSdkVersion :${flutter.compileSdkVersion}"


                defaultConfig {
                    minSdk = localProperties.getProperty('flutter.minSdkVersion').toInteger()
                }


                compileOptions {
                    sourceCompatibility javaVersion
                    targetCompatibility javaVersion
                }

                tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
                    kotlinOptions {
                        jvmTarget = javaVersion.toString()
                    }
                }



                project.tasks.whenTaskAdded { task ->
                    if (task.name.contains('processDebugManifest') || task.name.contains('processReleaseManifest')) {
                        task.doFirst {
                            File manifestFile = file("${projectDir}/src/main/AndroidManifest.xml")
                            if (manifestFile.exists()) {
                                String manifestContent = manifestFile.text
                                if (manifestContent.contains('package=')) {
                                    manifestContent = manifestContent.replaceAll(/package="[^"]*"/, "")
                                    manifestFile.write(manifestContent)
                                    println "Removed 'package' attribute from ${manifestFile}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

subprojects {
    project.evaluationDependsOn(":app")
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
